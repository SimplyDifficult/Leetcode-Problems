class Solution {
public:

    void merge(vector<int>&arr,int start, int mid, int end){
        int n1=mid-start+1;
        int n2=end-mid;
        int L[n1],R[n2];
        for(int i=0;i<n1;i++){
            L[i]=arr[start+i];
        }
        for(int j=0;j<n2;j++){
            R[j]=arr[mid+1+j];
        }
        int i=0,j=0;
        for(int k=start;k<=end;k++){
            if(j>=n2 || (i<n1 && L[i]<=R[j]))
                arr[k]=L[i++];
            else
                arr[k]=R[j++];
        }
    }

    int merge_count(vector<int>&arr, int start,int end){
        if(start<end){
            int mid=(start+end)/2;
            int count=merge_count(arr,start,mid)+merge_count(arr,mid+1,end);
            int j=mid+1;
            for(int i=start;i<=mid;i++){
                while(j<=end && arr[i]>arr[j]*2LL)
                    j++;
                count+=j-(mid+1);
            }
            merge(arr,start,mid,end);
            return count;
        }
        else
            return 0;
    }

    int reversePairs(vector<int>& nums) {
        return merge_count(nums,0,nums.size()-1);
    }
};



/* Store countcountcount by recursively calling merge_count on [start,mid] and [mid+1,end]  
and adding the results. This is the divide step on our routine, breaking it into the 2 ranges,
and finding the results for each range separately

Now, we that we have separately calculated the results for ranges [start,mid] and [mid+1,end]
,but we still have to count the elements in [start,mid] that are greater than 2 * elements in
[mid+1,end]. Count all such elements and add the result to count. */
