/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<TreeNode*>f(int left,int right){
        vector<TreeNode*>ans;
        if(left>right)ans.push_back(0);
        if(left==right)ans.push_back(new TreeNode(left));
        if(left<right){
            for(int i=left;i<=right;i++){
                vector<TreeNode*>l=f(left,i-1);
                vector<TreeNode*>r=f(i+1,right);
                for(TreeNode* L:l){
                    for(TreeNode* R:r){
                        TreeNode* curr=new TreeNode(i);
                        curr->left=L;
                        curr->right=R;
                        ans.push_back(curr);
                    }
                }
            }
        }
        return ans;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*>ans;
        if(n==0)return ans;
        return f(1,n);
    }
};
